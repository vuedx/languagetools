name: CI/CD

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

.checkout: &checkout
  - name: Checkout
    uses: actions/checkout@v2

.node_modules_cache: &node_modules_cache
  - name: Cache node packages
    uses: actions/cache@v2
    env:
      cache-name: pnpm-modules
    with:
      key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      restore-keys: |
        ${{ runner.os }}-build-${{ env.cache-name }}-
        ${{ runner.os }}-build-
        ${{ runner.os }}-
      path: |
        ~/.pnpm-store
        ${{ github.workspace }}/.pnpm
.node: &node
  - name: Setup Node
    uses: actions/setup-node@v2
    with:
      node-version: '16'

.pnpm: &pnpm
  - name: Setup PNPM
    uses: pnpm/action-setup@v2.0.1
    with:
      version: '6.2.5'
      run_install: |
        - recursive: true
          args: [--frozen-lockfile]

.setup: &setup
  - *checkout
  - *node_modules_cache
  - *node
  - *pnpm

.download: &download
  - name: Download build artefact
    uses: actions/download-artifact@v2
    with:
      name: build-artefact
      path: '.'

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - *setup
      - run: |
          cd samples
          pnpm install --frozen-lockfile --silent
      - name: Build
        run: |
          pnpm recursive --filter @vuedx/monorepo-tools run build
          pnpm run ci:build
          pnpm recursive --filter ./extensions run build
      - name: Upload build artefact
        uses: actions/upload-artifact@v2
        with:
          name: build-artefact
          retention-days: 30
          path: |
            ./packages/*/lib
            ./packages/*/runtime
            ./extensions/coc-vue/dist
            ./extensions/*/dist
            ./extensions/*/*.vsix

  unit:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node_version: ['16']
        include:
          - os: ubuntu-latest
            node: '16'
            command: 'coverage'
    runs-on: ${{ matrix.os }}
    name: Node ${{ matrix.node_version }} on ${{ matrix.os }}
    steps:
      - *checkout
      - *node_modules_cache
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
      - *pnpm
      - *download
      - run: |
          cd samples
          pnpm install --frozen-lockfile --silent
      - name: Test
        run: pnpm ${{ matrix.command || 'test' }}
      - name: Collect coverage
        if: always() && matrix.command == 'coverage'
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage/coverage-final.json

  eslint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - *setup
      - *download
      - run: pnpm eslint:check
        env:
          DEBUG: eslint:file-enumerator

  pre-release:
    name: Pre-release
    runs-on: ubuntu-latest
    needs: unit
    concurrency:
      group: pre-release
      cancel-in-progress: true
    if: github.ref == 'refs/heads/main'
    steps:
      - *setup
      - *download
      - name: Publish Pre-release Extension
        run: |
          pnpm recursive --filter ./extensions run build
          pnpm recursive --filter ./extensions run pre-release
        env:
          RELEASE_CHANNEL: pre-release
          VSCODE_MARKETPLACE_TOKEN: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
      - name: Publish Pre-release Packages
        run: |
          pnpm recursive exec -- pnpm version prerelease --preid=next-$(date +%s) --no-commit-hooks --no-git-tag-version
          echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc
          pnpm recursive publish --tag next --access public --no-git-checks

  check_release:
    name: Check Release
    runs-on: ubuntu-latest
    needs: unit
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')
    steps:
      - run: echo 'ok'

  release:
    name: Release
    runs-on: ubuntu-latest
    environment:
      name: Production
    needs: check_release
    concurrency:
      group: release
      cancel-in-progress: false
    steps:
      - *setup
      - *download
      - name: Publish Extension
        run: |
          pnpm recursive --filter ./extensions run build
          pnpm recursive --filter ./extensions run release'
          pnpm -y osvx publish -p ${OVSX_REGISTRY_TOKEN} ./extensions/vscode-vue/vue.vsix
          pnpm -y osvx publish -p ${OVSX_REGISTRY_TOKEN} ./extensions/vscode-vue-language-features/vue-language-features.vsix
        env:
          VSCODE_MARKETPLACE_TOKEN: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
          OVSX_REGISTRY_TOKEN: ${{ secrets.OVSX_REGISTRY_TOKEN }}
        continue-on-error: true # It will fail when publishing same version again.
      - name: Publish Packages
        run: |
          echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc
          pnpm recursive publish --tag latest --access public --no-git-checks
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - uses: 'marvinpinto/action-automatic-releases@latest'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          automatic_release_tag: 'latest'
          prerelease: false
          files: |
            extensions/*/*.vsix
