const fs = require('fs')
const cp = require('child_process')
const path = require('path')
const docComment = require('doctrine')
function generate(fileName, info) {
  let code =
    '\n<!-- Do not edit this file. It is a report generated by [scripts/docgen.js](https://github.com/znck/vue-developer-experience/tree/master/scripts/docgen.js). -->\n\n## API\n\n'

  info.members.forEach((entrypoint) => {
    const api = entrypoint.members.filter(
      (member) =>
        member.releaseTag === 'Public' &&
        !['Type', 'Interface'].includes(member.kind),
    )

    const types = entrypoint.members.filter(
      (member) =>
        member.releaseTag === 'Public' &&
        ['Type', 'Interface'].includes(member.kind),
    )

    api.sort((a, b) => {
      return String(a.kind).localeCompare(b.kind)
    })

    api.forEach((element) => {
      if (element.kind === 'Class') code += genClass(element)
      else if (element.kind === 'Function') code += genFunction(element)
    })

    if (types.length > 0) {
      code += '\n## Types\n\n'
      types.forEach((member) => {
        code += genType(member)
      })
    }
  })

  const openTag = '<!-- #region API-DOCS -->'
  const closeTag = '<!-- #region API-DOCS -->'

  const content = fs.readFileSync(fileName, { encoding: 'utf-8' })
  let start = content.indexOf(openTag)
  const end = content.indexOf(closeTag, start + 1)

  if (start < 0 || end < 0) {
    fs.writeFileSync(
      fileName,
      content + openTag + '\n\n' + code + '\n\n' + closeTag,
    )
  } else {
    start += openTag.length
    fs.writeFileSync(
      fileName,
      content.substr(0, start) + code + content.substr(end),
    )
  }
}

function genFunction(member, hLevel = 3) {
  let code = ''
  const cc = docComment.parse(member.docComment.trim(), { unwrap: true })
  code += `\n<a href="${getId(member.canonicalReference)}" id="${getId(
    member.canonicalReference,
    false,
  )}"></a>\n\n`
  code +=
    '#'.repeat(hLevel) +
    ` [${member.name}](${getId(member.canonicalReference)})\n\n`
  code += `${cc.description}\n\n`

  if (hLevel === 3) code += '<details>\n<summary>More info</summary>\n\n'
  code += `**Signature:**\n`
  code += '```ts\n'
  code += Array.from(member.excerptTokens)
    .map((token) => token.text)
    .join('')
  code += '\n```\n\n'

  if (member.parameters?.length) {
    code += `| Parameter | Type | Description |\n`
    code += `| --- | --- | --- |\n`
    member.parameters.forEach(
      ({
        parameterName,
        parameterTypeTokenRange: { startIndex, endIndex },
      }) => {
        code += `| ${parameterName} | <code>${member.excerptTokens
          .slice(startIndex, endIndex)
          .map((item) =>
            'canonicalReference' in item && item.canonicalReference != null
              ? `<a href="${getId(item.canonicalReference)}">${item.text}</a>`
              : `${item.text}`,
          )
          .join('')
          .replace(/\|/g, '&#124;')}</code> | ${
          cc.tags
            .find((tag) => tag.title === 'param' && tag.name === parameterName)
            ?.description.replace(/\n/g, '\n<br>\n')
            .replace(/\|/g, '&#124;') ?? '-'
        } |\n`
      },
    )
  }

  if (hLevel === 3) code += '\n</details>'
  code += '\n<br>\n'

  return code
}

function genClass(info) {
  let code = ''
  const cc = docComment.parse(info.docComment.trim(), { unwrap: true })
  code += `\n<a href="${getId(info.canonicalReference)}" id="${getId(
    info.canonicalReference,
    false,
  )}"></a>\n\n`
  code += `### [${info.name}](${getId(info.canonicalReference)})\n\n`
  code += `${cc.description}\n\n`
  code += '<details><summary>More info</summary>\n\n'
  code += `**Signature:**\n`
  code += '```ts\n'
  code += Array.from(info.excerptTokens)
    .map((token) => token.text)
    .join('')
  if (info.members) {
    code += '{\n'
    info.members.forEach((value) => {
      code +=
        '  ' + value.excerptTokens.map((item) => item.text).join('') + '\n'
    })
    code += '}'
  }
  code += '\n```\n\n'

  if (info.members.length) {
    code += '**Members:**\n\n'
    info.members.forEach((member) => {
      if (member.releaseTag === 'Public') {
        switch (member.kind) {
          case 'Method':
            code += genFunction(member, 4)
            break

          default:
            break
        }
      }
    })
  }
  code += '</details>\n\n<br>\n\n'

  return code
}

function genType(member) {
  let code = ''
  const tokens = Array.from(member.excerptTokens).map((token) => token.text)
  const cc = docComment.parse(member.docComment.trim(), { unwrap: true })
  code += `\n<a href="${getId(member.canonicalReference)}" id="${getId(
    member.canonicalReference,
    false,
  )}"></a>\n\n`
  code += `### [${member.name.replace(/_[\d]+$/, '')}](${getId(
    member.canonicalReference,
  )})\n\n`
  code += `${cc.description}\n\n`

  code += '```ts\n'
  code += tokens.join('')
  if (member.members) {
    code += '{\n'
    member.members.forEach((value) => {
      code +=
        '  ' + value.excerptTokens.map((item) => item.text).join('') + '\n'
    })
    code += '}'
  }
  code += '\n```\n\n'

  code += '\n<br>\n'

  return code
}

function getId(text, prepend = true) {
  return (prepend ? '#' : '') + text.replace(/[^a-z0-9-]/gi, '-')
}

const packages = [
  'template-ast-types',
  'analyze',
  'compiler-tsx',
  'vue-virtual-textdocument',
]

const bin = path.resolve(__dirname, '../node_modules/.bin/api-extractor')
packages.forEach((pkg) => {
  const dir = path.resolve(__dirname, '../packages/', pkg)
  const fileName = path.resolve(dir, 'readme.md')
  cp.execSync(`${bin} run --local --verbose`, { cwd: dir })

  const info = require(path.resolve(dir, 'temp', pkg + '.api.json'))
  generate(fileName, info)
})
